import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.InputMismatchException;
import java.util.Scanner;

public class FileHandlingExample {

    // Method that declares an exception
    public static int readByteFromFile() throws IOException {
        try (InputStream in = new FileInputStream("a.txt")) { // Try-with-resources
            System.out.println("File open");
            return in.read(); // Read a byte from the file
        } // Resource 'in' will be automatically closed here
    }

    public static void main(String[] args) {
        // Example of handling declared exceptions where the method is called
        try {
            System.out.println("About to open a file");
            int data = readByteFromFile(); // Method call that may throw an IOException
            System.out.println("Data read: " + data);
        } catch (FileNotFoundException e) { // Specific exception handling
            System.out.println("File not found: " + e.getMessage());
        } catch (IOException e) { // General IO exception handling
            System.out.println("IO Error: " + e.getMessage());
        }

        // Multi-Catch Statement example
        Scanner scanner = new Scanner(System.in);
        try {
            System.out.print("Enter a number: ");
            int number = Integer.parseInt(scanner.nextLine()); // May throw NumberFormatException
            System.out.println("You entered: " + number);
        } catch (NumberFormatException | InputMismatchException e) { // Multi-catch for two exception types
            System.out.println("Invalid input: " + e.getMessage());
        } finally {
            scanner.close(); // Ensure the scanner is closed
        }
    }
}
